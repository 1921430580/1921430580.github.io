<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>my blog</title>
  
  <subtitle>记录生活</subtitle>
  <link href="http://1921430580.github.io/atom.xml" rel="self"/>
  
  <link href="http://1921430580.github.io/"/>
  <updated>2022-04-21T07:02:43.329Z</updated>
  <id>http://1921430580.github.io/</id>
  
  <author>
    <name>张栋梁</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用的十大排序算法</title>
    <link href="http://1921430580.github.io/2022/04/21/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://1921430580.github.io/2022/04/21/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2022-04-21T01:17:54.000Z</published>
    <updated>2022-04-21T07:02:43.329Z</updated>
    
    <content type="html"><![CDATA[<p>首先从时间和空间复杂度来比较</p><table><thead><tr><th>排序算法</th><th>平均时间复杂度</th><th>最差时间复杂度</th><th>空间复杂度</th><th>数据对象稳定性</th></tr></thead><tbody><tr><td>冒泡排序</td><td>O(n2)</td><td>O(n2)</td><td>O(1)</td><td>稳定</td></tr><tr><td>选择排序</td><td>O(n2)</td><td>O(n2)</td><td>O(1)</td><td>数组不稳定、链表稳定</td></tr><tr><td>插入排序</td><td>O(n2)</td><td>O(n2)</td><td>O(1)</td><td>稳定</td></tr><tr><td>快速排序</td><td>O(n*log2n)</td><td>O(n2)</td><td>O(log2n)</td><td>不稳定</td></tr><tr><td>堆排序</td><td>O(n*log2n)</td><td>O(n*log2n)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>归并排序</td><td>O(n*log2n)</td><td>O(n*log2n)</td><td>O(n)</td><td>稳定</td></tr><tr><td>希尔排序</td><td>O(n*log2n)</td><td>O(n2)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>计数排序</td><td>O(n+m)</td><td>O(n+m)</td><td>O(n+m)</td><td>稳定</td></tr><tr><td>桶排序</td><td>O(n)</td><td>O(n)</td><td>O(m)</td><td>稳定</td></tr><tr><td>基数排序</td><td>O(k*n)</td><td>O(n2)</td><td></td><td>稳定</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">更新中ing</summary>
    
    
    
    <category term="学习笔记" scheme="http://1921430580.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="算法" scheme="http://1921430580.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习笔记之变量与运算</title>
    <link href="http://1921430580.github.io/2022/04/18/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://1921430580.github.io/2022/04/18/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-04-18T07:16:54.000Z</published>
    <updated>2022-04-19T08:51:49.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、变量与运算"><a href="#一、变量与运算" class="headerlink" title="一、变量与运算"></a>一、变量与运算</h1><p>​在任何程序语言中，最基本的一项功能就是设置变量。 通过对变量的运算，来实现程序功能。</p><h2 id="1、变化的量"><a href="#1、变化的量" class="headerlink" title="1、变化的量"></a>1、变化的量</h2><p>​所谓设置一个变量，也就是设置一个可以变化的量。变量简单理解，就是我们给一个东西的名字。 或者说是为了暂时在计算机中存储一个东西，我们给这个东西取了一个名字。比如如果我们要做文件管理系统， 那么这个系统得有一个名字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;文件管理系统&quot;</span></span><br></pre></td></tr></table></figure><p>​这里的 name 是我们为这个变量设置的名字，而 文件管理系统 则是这个变量 name 中的取值。</p><p>​在Python中，我们可以用三种方式来标识字符：</p><p>​第一种是用英文的单引号</p><p>​第二种是用英文的单引号</p><p>​第二种是用三个引号（可单&#x2F;双引）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;文件管理系统&#x27;</span></span><br><span class="line">name2 = <span class="string">&quot;文件管理系统&quot;</span></span><br><span class="line">name3 = <span class="string">&quot;&quot;&quot;文件管理系统&quot;&quot;&quot;</span>   <span class="comment">#或者是&#x27;&#x27;&#x27;文件管理系统&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Q：为什么要使用三个引号呢？使用三个引号有什么好处呢？</p><p>A：这种三个引号的在文本量比较多的情况下有一个好处，就是可以书写跨行的文本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">long_text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这是一段长文本，</span></span><br><span class="line"><span class="string">有多长的，</span></span><br><span class="line"><span class="string">是真的很长。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">long_text</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Q ：如果只用一个引号来写多行文本会有什么问题呢？</p><p>A：语法错误，报错内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/lib/python3.9/asyncio/futures.py&quot;</span>, line <span class="number">201</span>, <span class="keyword">in</span> result</span><br><span class="line">    <span class="keyword">raise</span> self._exception</span><br><span class="line">  File <span class="string">&quot;/lib/python3.9/asyncio/tasks.py&quot;</span>, line <span class="number">256</span>, <span class="keyword">in</span> __step</span><br><span class="line">    result = coro.send(<span class="literal">None</span>)</span><br><span class="line">  File <span class="string">&quot;/lib/python3.9/site-packages/_pyodide/_base.py&quot;</span>, line <span class="number">494</span>, <span class="keyword">in</span> eval_code_async</span><br><span class="line">    <span class="keyword">await</span> CodeRunner(</span><br><span class="line">  File <span class="string">&quot;/lib/python3.9/site-packages/_pyodide/_base.py&quot;</span>, line <span class="number">237</span>, <span class="keyword">in</span> __init__</span><br><span class="line">    self.ast = <span class="built_in">next</span>(self._gen)</span><br><span class="line">  File <span class="string">&quot;/lib/python3.9/site-packages/_pyodide/_base.py&quot;</span>, line <span class="number">141</span>, <span class="keyword">in</span> _parse_and_compile_gen</span><br><span class="line">    mod = <span class="built_in">compile</span>(source, filename, mode, flags | ast.PyCF_ONLY_AST)</span><br><span class="line">  File <span class="string">&quot;&lt;exec&gt;&quot;</span>, line <span class="number">3</span></span><br><span class="line">    long_text = <span class="string">&#x27;</span></span><br><span class="line"><span class="string">                 ^</span></span><br><span class="line"><span class="string">SyntaxError: EOL while scanning string literal</span></span><br></pre></td></tr></table></figure><p>在定义多个变量的时候，我们还有一些快捷写法，比如下面这样，等号两边逐个写出变量的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name1, name2, name3 = <span class="string">&quot;文件&quot;</span>, <span class="string">&quot;系统&quot;</span>, <span class="string">&quot;管理&quot;</span></span><br></pre></td></tr></table></figure><p>或者你想一次性定义多个相同取值的变量，有一个简单的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name1 = name2 = name3 = <span class="string">&quot;文件系统&quot;</span></span><br></pre></td></tr></table></figure><h2 id="2、打印-Print"><a href="#2、打印-Print" class="headerlink" title="2、打印 Print"></a>2、打印 Print</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的Python最棒~&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的Python的&quot;</span>, name, <span class="string">&quot;业界顶呱呱&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我看着&quot;</span>, <span class="string">&quot;莫烦&quot;</span>, <span class="string">&quot;的教学长大的~&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、数学运算"><a href="#3、数学运算" class="headerlink" title="3、数学运算"></a>3、数学运算</h2><p>​除了文本数据，我们使用变量还可以记录多种多样的信息。比如数字和列表，字典。 这节主要讲数字和基于数字的基本运算。列表和字典我们留在后面 文件管理系统中，和数字有关的比如文件时间（在后续的datetime详细讲解）， 或者是文件版本号，文件数等。这里我们用文件数来过一遍数学运算的知识。</p><p>很简单，运用上面变量的知识，你只需要给这个数字一个名字，比如我的系统里有十个文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num_of_files = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我系统里有&quot;</span>, num_of_files, <span class="string">&quot;个文件&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这些文件我要分成5组，每组多少个呢？这就是除法了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;分五组，每组&quot;</span>, num_of_files / <span class="number">5</span>, <span class="string">&quot;个&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>运算符</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>3+4&#x3D;7</td></tr><tr><td>-</td><td>减</td><td>3-4&#x3D;-1</td></tr><tr><td>*</td><td>乘</td><td>3*4&#x3D;12</td></tr><tr><td>&#x2F;</td><td>除</td><td>3&#x2F;2&#x3D;1.5</td></tr><tr><td>%</td><td>取模</td><td>103%100&#x3D;3</td></tr><tr><td>**</td><td>幂</td><td>3**2&#x3D;9</td></tr><tr><td>&#x2F;&#x2F;</td><td>取整除</td><td>10&#x2F;&#x2F;3&#x3D;3</td></tr></tbody></table><p>注：字符串也是可以相加的</p><p>一些简便的运算写法：常用的及时修改变量的简便写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>        </span><br><span class="line">a += <span class="number">1</span>                <span class="comment">#相当于a=a+1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a += &quot;</span>, a)</span><br><span class="line">a -= <span class="number">1</span>                <span class="comment">#相当于a=a-1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a -= &quot;</span>, a)</span><br><span class="line">a *= <span class="number">10</span>               <span class="comment">#相当于a=a*10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a *= &quot;</span>, a)</span><br><span class="line">a /= <span class="number">2</span>                <span class="comment">#相当于a=a/2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a /= &quot;</span>, a)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>二、判断，数据，循环</p><p>​1、if 如果：if 很好理解，就是判断的基石，如果什么样就做什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">in_trash = <span class="literal">True</span>              <span class="comment">#在回收站中</span></span><br><span class="line"><span class="keyword">if</span> in_trash:              <span class="comment">#如果在回收站中则执行下一步</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;可以被彻底删除&quot;</span>)<span class="comment">#打印可以被彻底删除</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​Q：你可以尝试一下，把上面的in_trash &#x3D; True改成in_trash &#x3D; False，看看会有什么样的结果。 </p><p>​A：不打印</p><p>下面，我们在 in_trash 前面加上一个 not 来表示 in_trash 的反面，也就是不在垃圾桶里的意思。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">in_trash = True</span><br><span class="line">if not in_trash:</span><br><span class="line">    print(&quot;不可以被彻底删除&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​同样，你可以再尝试一下，把上面的in_trash &#x3D; False改成in_trash &#x3D; True，看看会有什么样的结果。</p><p>if-else 如果否则</p><p>​其实，如果又要判断正面又要判断反面的情况，我们完全可以一次性搞定，比如下面使用 if-else 这种结构。 简单明了地就同时判断了正反面应该做的两件不同的事情。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">in_trash = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> in_trash:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;可以被彻底删除&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不可以被彻底删除&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>判断条件</p><p>​其实除了 True &#x2F; False 还有很多其他的间接判断条件。比如下面列出来的这些判断标准。</p><table><thead><tr><th>判断</th><th>含义</th></tr></thead><tbody><tr><td>a &#x3D;&#x3D; b</td><td>a 是否等于 b</td></tr><tr><td>a &gt; b</td><td>a 是否大于 b</td></tr><tr><td>a &gt;&#x3D; b</td><td>a 是否大于等于 b</td></tr><tr><td>a &lt; b</td><td>a 是否小于 b</td></tr><tr><td>a &lt;&#x3D; b</td><td>a 是否小于等于 b</td></tr><tr><td>a !&#x3D; b</td><td>a 是否不等于 b</td></tr></tbody></table><p>​如果是文字的话，也可以比较是否等于&#x2F;不等于，其它那些大于小于都是用于数值判断的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a, b = &quot;文件1&quot;, &quot;文件2&quot;</span><br><span class="line">a == b</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;2 &lt; 3&quot;, 2 &lt; 3)</span><br><span class="line">print(&quot;3 &lt; 2&quot;, 3 &lt; 2)</span><br><span class="line">print(&quot;2 != 2&quot;, 2 != 2)</span><br></pre></td></tr></table></figure><p>你还可以在这里尝试大把其他的判断，这些判断都会返回一个 True 后 False 的结果。甚至，你还可以叠加不同的判断。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(2 &lt; 3 and 2 &lt; 5)</span><br><span class="line">print(2 &gt; 3 or 3 == 3)</span><br><span class="line">print(2 &gt; 3 or not 3 == 3 and 5 &lt; 10)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>附：and or not 的含义</p><table><thead><tr><th>判断</th><th>含义</th></tr></thead><tbody><tr><td>True <strong>and</strong> True</td><td>需要两边同时满足才能返回 True</td></tr><tr><td>True <strong>or</strong> False</td><td>只要一边是 True 则返回 True</td></tr><tr><td><strong>not</strong> True</td><td>给出相反结果</td></tr></tbody></table><p>​有了这些工具，拿到最终的那个 True &#x2F; False 后，你就能再套用在 if-else 的结构里啦，将判断依据与判断后的流程联通在一起。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a, b = 1, 2</span><br><span class="line">if a &gt; b:</span><br><span class="line">    print(&quot;a 大于 b&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;a 不大于 b&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>if-elif-else</p><p>​还有比 if-else 更强大的结构。因为有时候我们还需要多判断一些情况，比如周一要干嘛，周二要干嘛，周三要干嘛等等，这并不是一个非黑即白的判断，而是多重判断连在一起的。 所以我们必然有更好的方式去判断。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">today = 4</span><br><span class="line">if today == 1:</span><br><span class="line">    print(&quot;周一&quot;)</span><br><span class="line">elif today == 2:</span><br><span class="line">    print(&quot;周二&quot;)</span><br><span class="line">elif today == 3:</span><br><span class="line">    print(&quot;周三&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;周一周二周三之外的一天&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Q：要判断多个数值区间该怎么写呢？</p><p>A：</p><p>for 和 while 循环</p>]]></content>
    
    
    <summary type="html">普通的笔记</summary>
    
    
    
    <category term="Python学习笔记" scheme="http://1921430580.github.io/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://1921430580.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>编程学习踩坑之路</title>
    <link href="http://1921430580.github.io/2022/04/18/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E8%B8%A9%E5%9D%91%E4%B9%8B%E8%B7%AF/"/>
    <id>http://1921430580.github.io/2022/04/18/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E8%B8%A9%E5%9D%91%E4%B9%8B%E8%B7%AF/</id>
    <published>2022-04-18T01:35:41.000Z</published>
    <updated>2022-04-18T03:06:16.876Z</updated>
    
    <content type="html"><![CDATA[<p>待更新</p>]]></content>
    
    
    <summary type="html">踩过的坑</summary>
    
    
    
    <category term="踩过的坑" scheme="http://1921430580.github.io/categories/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    
    
    <category term="踩过的坑" scheme="http://1921430580.github.io/tags/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据结构学习笔记之</title>
    <link href="http://1921430580.github.io/2022/04/18/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://1921430580.github.io/2022/04/18/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-04-18T01:27:35.000Z</published>
    <updated>2022-04-18T09:59:06.477Z</updated>
    
    <content type="html"><![CDATA[<p>待更新</p>]]></content>
    
    
    <summary type="html">一个简单的算法与数据结构学习笔记</summary>
    
    
    
    <category term="算法与数据结构学习笔记" scheme="http://1921430580.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://1921430580.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>c++笔记之初识c++</title>
    <link href="http://1921430580.github.io/2022/04/18/c++%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%9D%E8%AF%86c++/"/>
    <id>http://1921430580.github.io/2022/04/18/c++%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%9D%E8%AF%86c++/</id>
    <published>2022-04-18T00:29:06.000Z</published>
    <updated>2022-04-21T07:09:25.285Z</updated>
    
    <content type="html"><![CDATA[<p>想了想还是以c++prime为主吧。</p><h1 id="第1章-开始"><a href="#第1章-开始" class="headerlink" title="第1章 开始"></a>第1章 开始</h1><h2 id="1-1-编写一个简单的c-程序"><a href="#1-1-编写一个简单的c-程序" class="headerlink" title="1.1 编写一个简单的c++程序"></a>1.1 编写一个简单的c++程序</h2><h3 id="1-1-1-编译-运行程序"><a href="#1-1-1-编译-运行程序" class="headerlink" title="1.1.1 编译.运行程序"></a>1.1.1 编译.运行程序</h3><p>●由于计算机不能直接理解和运行C++源程序所以需要把人类读写的字符的排列变为计算机能理解的比特的排列。（即转换为0和1组成的代码）</p><p>●对源程序进行编译、链接，形成可执行文件</p><p>int类型是一种内置类型，即语言自身定义的类型</p><p>1.2 初识输入输出<br>        输入流和输出流而言，一个流就是一个字符序列。术语“流”的意思表示，随时间的推移，字符是顺序生成或消耗的。从流中获取数据的操作称为提取操作，向流中添加数据的操作称为插入操作。</p><p>​标准库的四个标准输入输出流：cin、cout、cerr、clog。</p><p>​比如：cin &gt;&gt; x     #(cin是标准输入流，&gt;&gt;是输入运算符，&gt;&gt;x是变量)</p><p>​cin与键盘配合形成流，提取流过来的字符，并将其作为数值存放到变量x中。</p><p>cin:        istream类型的对象，标准输入( standard input )<br>cout:     ostream类型的对象，标准输出( standard output )<br>cerr:      ostream类型的对象，标准错误(standard error)<br>clog:     ostream类型的对象，用来输出程序运行时的一般信息</p><p>Q：关于引入标准库头文件</p><p>A：有两种方式，一种是尖括号一种是双引号，一般是指的他们的搜索路径不同，如果是尖括号是在系统指定目录寻找头文件，双引号（自己创建的头文件）是先到项目所在目录寻找头文件再到系统指定目录寻找头文件。</p><p>​cin可以跳过空格、制表符、换行符等空白字符</p><p>​cout 可以重定向（比如输出到文件），通过缓冲区。</p><p>​cerr 不可以重定向（只能输出到显示器），不通过缓冲区。cerr的作用是在一些特殊的紧急情况下还可以输出（比如调用栈用完了，没有出口的递归等）。缓冲区的目的是减少刷屏的次数，多个字符同时输出到显示器。<br>​endl 是操作符，用来结束当前行，将设备相关的缓冲区内容刷到设备中。在添加打印语句时，应保证一直刷新流，以防程序崩溃，输出还留在缓冲区内。</p><p>​前缀std::是标准库命名空间（不能重名）（namespace）</p><p>1.3 注释简介</p><p>​注释可以帮助读者理解程序。当修改代码时，不要忘记修改注释。</p><p>​C++ 有两种注释：<br>​单行注释：以双斜线（&#x2F;&#x2F;）开始，以换行符结束。<br>​界定符对注释（不能嵌套）：以 &#x2F;* 开始，以 *&#x2F; 结束。<br>​当界定符对注释跨越多行时，最好能显示指出其内部的程序行都属于多行注释的一部分，因此建议注释内的每行都以一个星号开头。<br>​在 VS 中使用快捷键注释多行时采用的是 &#x2F;&#x2F;，理解：因为要注释的代码中可能包含 *&#x2F; 字符，这种情况下使用界定符对注释会产生错误，所以采用单行注释方式。</p><h2 id="1-4-控制流循环与分支"><a href="#1-4-控制流循环与分支" class="headerlink" title="1.4 控制流循环与分支"></a>1.4 控制流循环与分支</h2><h3 id="1-4-1-while语句"><a href="#1-4-1-while语句" class="headerlink" title="1.4.1 while语句"></a>1.4.1 while语句</h3><p>​while 语句：反复执行一段代码，直到给定条件为假为止，直到条件为假。</p><p>​●语法形式</p><p>​while  (表达式)  语句: 可以是复合语句，其中必须含有改变条件表达式的语句。</p><p>​●  执行顺序</p><p>​先判断表达式的值，若为 true 时，执行语句。</p><p>​do-while语句</p><p>​●  do-while 语句的语法形式</p><p>​do   语句     &#x2F;&#x2F; 可以是复合语句，其中必须含有改变条件表达式值的语句。</p><p>​while (表达式)</p><p>​●  执行顺序</p><p>​先执行循环体语句，后判断条件。<br>​表达式为 true 时，继续执行循环体。</p><h3 id="1-4-2-for语句"><a href="#1-4-2-for语句" class="headerlink" title="1.4.2 for语句"></a>1.4.2 for语句</h3><p>​因为在循环条件中检测变量、在循环体中递增变量的模式使用非常频繁，所以 C++ 专门定义了第二种循环语句：for 语句，来简化这种模式。</p><p>●初始化语句、循环条件、循环体、表达式</p><img src="D:\blog\picture\for语句.png" style="zoom:75%;" /><p>● for语句的另一种形式：范围for语句：</p><pre><code>for  (声明：表达式)    语句</code></pre><h3 id="1-4-3-读取数量不定的输入数据"><a href="#1-4-3-读取数量不定的输入数据" class="headerlink" title="1.4.3 读取数量不定的输入数据"></a>1.4.3 读取数量不定的输入数据</h3><p>​使用 while(cin&gt;&gt;value) 来读取数量不定的输入，循环会一直执行到遇到文件结束符或输入错误为止。windows的文件结束符是 Ctrl+Z 然后按 Enter<br>​在编译时，最好修改一个错误编译一次，或者最多修改了一小部分后重新编译。<br>​对于c++程序的缩进和格式，不存在唯一正确的风格，但是保持一致性是十分重要的。</p><p>1.4.4 if语句</p><p>●if (表达式) 语句</p><p>​例：if (x &gt; y) cout &lt;&lt; x;</p><p>●if (表达式) 语句1 else 语句2</p><p>​例：if (x &gt; y) cout &lt;&lt; x;</p><p>​else cout &lt;&lt; y;</p><p>●if (表达式1)语句1<br>  else if (表达式2) 语句2<br>  else if (表达式3) 语句3<br>            …<br>  else 语句 n</p><p>●嵌套的if结构</p><p>●  语法形式</p><p>if(   )</p><p>​if(   ) 语句 1</p><p>​else 语句 2</p><p>else</p><p>​if(   ) 语句 3</p><p>​else 语句 4</p><p>●  注意</p><p>​●  语句 1、2、3、4 可以是复合语句；</p><p>​●  每层的if 与 else 配对，或用 { } 来确定层次关系。</p><h2 id="1-5-类简介"><a href="#1-5-类简介" class="headerlink" title="1.5 类简介"></a>1.5 类简介</h2><p>​C++中我们通过类（class）来定义自己的数据结构。<br>​一个类定义了一个类型，以及与其相关联的一组操作</p><p>1.5.2 初识成员函数<br>        成员函数是定义为类的一部分的函数，也被称为方法。<br>        通常以类对象的名义来调用成员函数：Item.isbn()。即使用点运算符(.)</p><p>​. 点运算符<br>​()调用运算符,里面可以放参数</p><p>问题<br>四个标准输入输出流是什么<br>cout 和 cerr 的两点区别<br>缓冲区有什么作用？可以通过什么刷新缓冲区<br>while(cin&gt;&gt;value)什么情况下会停止<br>windows 的文件结束符是什么</p><p>回答<br>cin、cout、cerr、clog<br>cout 可重定向，通过缓冲区；cerr 不可重定向，不通过缓冲区<br>缓冲区能减少刷屏的次数，每个 endl 都会刷新一次缓冲区<br>遇到文件结束符或输入错误<br>先 ctrl+z 后 enter</p>]]></content>
    
    
    <summary type="html">一个简单的笔记</summary>
    
    
    
    <category term="c++学习笔记" scheme="http://1921430580.github.io/categories/c-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://1921430580.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>优化日志</title>
    <link href="http://1921430580.github.io/2022/04/17/%E4%BC%98%E5%8C%96%E6%97%A5%E5%BF%97/"/>
    <id>http://1921430580.github.io/2022/04/17/%E4%BC%98%E5%8C%96%E6%97%A5%E5%BF%97/</id>
    <published>2022-04-17T09:14:51.000Z</published>
    <updated>2022-04-18T03:16:47.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022年4月11日"><a href="#2022年4月11日" class="headerlink" title="2022年4月11日"></a>2022年4月11日</h1><p>1、修改页头和页脚为透明</p><p>2、修改文章卡片和每个页面的透明度</p><p>3、优化头图由模糊变清晰的时间</p>]]></content>
    
    
    <summary type="html">记录一直以来的优化历程</summary>
    
    
    
    <category term="优化日志" scheme="http://1921430580.github.io/categories/%E4%BC%98%E5%8C%96%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="优化日志" scheme="http://1921430580.github.io/tags/%E4%BC%98%E5%8C%96%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>笔记本更换无线网卡</title>
    <link href="http://1921430580.github.io/2022/04/17/%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%9B%B4%E6%8D%A2%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1/"/>
    <id>http://1921430580.github.io/2022/04/17/%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%9B%B4%E6%8D%A2%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1/</id>
    <published>2022-04-17T07:52:51.000Z</published>
    <updated>2022-04-17T08:44:09.790Z</updated>
    
    <content type="html"><![CDATA[<p>​正好由于疫情原因封在家里不能出去，之前买了个IntelAX210无线网卡，顺便就给换了。原来的AC9462网卡实在太拉了</p><p>​AX210首先，直接上了一个新标准Wi-Fi6E，意味着更新、更强及更高性能。Wi-Fi6E较Wi-Fi6，新增了一个全新的6GHz超宽频段。有多宽呢？相当于平添110个信道，至高可支持160MHz频宽。虽然，速率上与5.8GHz相当，均为2402Mbps，但却空前纯净，几乎不存在任何干扰。在近距离传输上，6GHz频段显然更具前景。</p><p>​其次，AX210集成了更为强大的蓝牙5.2功能，而这一模块在Wi-Fi6上采用的则是蓝牙5.0标准。蓝牙5.2具有更高传输速率、更安全、更省电优势，在无线物联和无线影音表现上自然更胜一筹。</p><p>​wifi6E除了支持以往的2.4GHz与5GHz频段之外，还支持全新的6GHz频段，相较5GHz频段数量有着翻倍增加，让传输速度更快；同时将160MHz信道由2条增加至7条，同时将80MHz信道由6条增加至14条，解决连接多设备时互相干扰导致降速的问题</p><p>​WiFi 6相比WiFi 5，拥有更大带宽、更多连接终端、更低延迟等优势，主要是加入了BBS着色技术，降低信道干扰，反正比WiFi 5更好用就对了。配合WiFi 6路由器，绝对是美滋滋，体验非常好。未来的wifi6e也支持了，直接一步到位基本以后不需要换网卡了，如果网卡落后了那就是得直接换电脑了。</p><p>简单总结一下步骤：</p><p>1、洗手，2、摸金，3、拆后盖，4、断电源，5,、按几下开机键，6、拆网卡，7换网卡，8、复原，9、开机，10、安驱动</p><h1 id="1、洗手并摸一下金属物体"><a href="#1、洗手并摸一下金属物体" class="headerlink" title="1、洗手并摸一下金属物体"></a>1、洗手并摸一下金属物体</h1><p>​先洗手然后摸一下金属物体（比如门把手之类的）去除我们身上的静电。</p><p>作用是为了防止静电击穿而损坏笔记本的主板。</p><h1 id="2、拆后盖"><a href="#2、拆后盖" class="headerlink" title="2、拆后盖"></a>2、拆后盖</h1><p>用螺丝刀拆开即可，注意螺丝不要弄丢</p><h1 id="3、断电源"><a href="#3、断电源" class="headerlink" title="3、断电源"></a>3、断电源</h1><p>用手掰住电源插口的两个耳朵用力往外一拔就好</p><h1 id="4、按几下开机键"><a href="#4、按几下开机键" class="headerlink" title="4、按几下开机键"></a>4、按几下开机键</h1><p>用来去除笔记本的静电</p><h1 id="5、拆网卡"><a href="#5、拆网卡" class="headerlink" title="5、拆网卡"></a>5、拆网卡</h1><p>用螺丝刀拧开固定无线网卡的螺丝即可，拆掉的时候记得记清楚两根天线原来的安装位置，等会原样安回去。</p><h1 id="6、换网卡"><a href="#6、换网卡" class="headerlink" title="6、换网卡"></a>6、换网卡</h1><p>将购买的ax210网卡插进去然后拧上螺丝即可，记得天线安装顺序不要弄反。</p><h1 id="7、复原"><a href="#7、复原" class="headerlink" title="7、复原"></a>7、复原</h1><p>按拆机步骤反向来一遍即可</p><h1 id="8、检查"><a href="#8、检查" class="headerlink" title="8、检查"></a>8、检查</h1><p>打开设备管理器看看无线网卡是否成功安装，并且正确识别。</p><h1 id="9、安驱动"><a href="#9、安驱动" class="headerlink" title="9、安驱动"></a>9、安驱动</h1><p>进入Intel官网安装ax210的最新版驱动，不安驱动速度提升不大。</p><h1 id="10、网上冲浪！"><a href="#10、网上冲浪！" class="headerlink" title="10、网上冲浪！"></a>10、网上冲浪！</h1>]]></content>
    
    
    <summary type="html">简单的更换无线网卡</summary>
    
    
    
    <category term="电脑" scheme="http://1921430580.github.io/categories/%E7%94%B5%E8%84%91/"/>
    
    
    <category term="电脑" scheme="http://1921430580.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
  </entry>
  
  <entry>
    <title>主题魔改踩坑之路</title>
    <link href="http://1921430580.github.io/2022/04/17/%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9%E8%B8%A9%E5%9D%91%E4%B9%8B%E8%B7%AF/"/>
    <id>http://1921430580.github.io/2022/04/17/%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9%E8%B8%A9%E5%9D%91%E4%B9%8B%E8%B7%AF/</id>
    <published>2022-04-17T06:58:21.000Z</published>
    <updated>2022-04-17T07:01:14.504Z</updated>
    
    <content type="html"><![CDATA[<p>测试</p>]]></content>
    
    
    <summary type="html">持续更新ing</summary>
    
    
    
    <category term="踩过的坑" scheme="http://1921430580.github.io/categories/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    
    
    <category term="踩过的坑" scheme="http://1921430580.github.io/tags/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>c++学习笔记之预备知识</title>
    <link href="http://1921430580.github.io/2022/04/15/c++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>http://1921430580.github.io/2022/04/15/c++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</id>
    <published>2022-04-15T08:46:51.000Z</published>
    <updated>2022-04-21T07:08:07.632Z</updated>
    
    <content type="html"><![CDATA[<p>​前言：本笔记通过观看b站的清华大学郑莉老师的c++课程结合学习c++语言程序设计和c++ primer 这两本书而总结的。</p><h1 id="一、计算机系统基本概念"><a href="#一、计算机系统基本概念" class="headerlink" title="一、计算机系统基本概念"></a>一、计算机系统基本概念</h1><h2 id="1、计算机硬件"><a href="#1、计算机硬件" class="headerlink" title="1、计算机硬件"></a>1、计算机硬件</h2><p>计算机硬件部分是由cpu、内存储器、外存储器、输入设备和输出设备五大部分组成的</p><h2 id="2、计算程序语言"><a href="#2、计算程序语言" class="headerlink" title="2、计算程序语言"></a>2、计算程序语言</h2><p>计算机解决问题是程序控制的；</p><p>程序就是操作步骤；</p><p>程序要使用语言来表达</p><h2 id="3、机器语言"><a href="#3、机器语言" class="headerlink" title="3、机器语言"></a>3、机器语言</h2><p>计算机能识别的是机器语言；</p><p>机器语言指令是由0和1编码的；</p><p>例如：加法指令可能是“0001”。</p><h2 id="4、计算软件"><a href="#4、计算软件" class="headerlink" title="4、计算软件"></a>4、计算软件</h2><p>是一系列按照特定顺序组织的计算机数据和指令的集合。一般来讲软件被划分为系统软件、应用软件和介于这两者之间的中间件；</p><p>软件包括程序和文档。</p><h2 id="5、计算机程序"><a href="#5、计算机程序" class="headerlink" title="5、计算机程序"></a>5、计算机程序</h2><p>指令的序列；</p><p>描述解决问题的方法和数据。</p><h1 id="二、计算机语言和程序设计方法"><a href="#二、计算机语言和程序设计方法" class="headerlink" title="二、计算机语言和程序设计方法"></a>二、计算机语言和程序设计方法</h1><h2 id="最初的计算机语言——机器语言"><a href="#最初的计算机语言——机器语言" class="headerlink" title="最初的计算机语言——机器语言"></a>最初的计算机语言——机器语言</h2><p>由二进制代码构成</p><p>计算机硬件可以识别</p><p>可以表示简单的操作</p><p>例如：加法、减法、数据移动等等</p><h2 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h2><p>将机器指令映射为助记符</p><p>如ADD、SUB、mov等；</p><p>抽象层次低，需要考虑机器细节。</p><h2 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h2><p>关键字、语句容易理解；</p><p>有含义的数据命名和算式；</p><p>抽象层次较高；</p><p>例如，算式：a+b+c&#x2F;d</p><p>屏蔽了机器的细节；</p><p>例如，这样显示计算结果：cout&lt;&lt;a+b+c&#x2F;d</p><h2 id="C-语言"><a href="#C-语言" class="headerlink" title="C++语言"></a>C++语言</h2><p>是高级语言</p><p>支持面向对象的观点和方法</p><p>将客观事物看做对象</p><p>对象间通过消息传送进行沟通</p><p>支持分类和抽象</p><h2 id="面向过程的程序设计方法："><a href="#面向过程的程序设计方法：" class="headerlink" title="面向过程的程序设计方法："></a>面向过程的程序设计方法：</h2><p>机器语言、汇编语言、高级语言都支持；</p><p>最初的目的：用于数学计算；</p><p>主要工作：设计求解问题的过程。</p><p>大型复杂的软件难以用面向过程的方式编写</p><h2 id="面向对象的程序设计方法："><a href="#面向对象的程序设计方法：" class="headerlink" title="面向对象的程序设计方法："></a>面向对象的程序设计方法：</h2><p>由面向对象的高级语言支持；</p><p>一个系统由对象构成；</p><p>对象之间通过消息进行通信。</p><h1 id="三、面向对象的基本概念"><a href="#三、面向对象的基本概念" class="headerlink" title="三、面向对象的基本概念"></a>三、面向对象的基本概念</h1><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>一般意义上的对象：现实世界中实际存在的事物。</p><p>面向对象方法中的对象：程序中用来描述客观事物的实体。</p><h2 id="抽象与分类"><a href="#抽象与分类" class="headerlink" title="抽象与分类"></a>抽象与分类</h2><p>分类依据的原则——抽象；</p><p>l抽象出同一类对象的共同属性和行为形成类；</p><p>l类与对象是类型与实例的关系。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>隐蔽对象的内部细节；</p><p>对外形成一个边界；</p><p>只保留有限的对外接口；</p><p>使用方便、安全性好。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>意义在于软件复用；</p><p>改造、扩展已有类形成新的类。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>同样的消息作用在不同对象上，可以引起不同的行为。</p><h1 id="四、程序的开发过程"><a href="#四、程序的开发过程" class="headerlink" title="四、程序的开发过程"></a>四、程序的开发过程</h1><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><h3 id="源程序："><a href="#源程序：" class="headerlink" title="源程序："></a>源程序：</h3><p>用源语言写的，有待翻译的程序；</p><h3 id="目标程序："><a href="#目标程序：" class="headerlink" title="目标程序："></a>目标程序：</h3><p>源程序通过翻译程序加工以后生成的机器语言程序；</p><h3 id="可执行程序："><a href="#可执行程序：" class="headerlink" title="可执行程序："></a>可执行程序：</h3><p>连接目标程序以及库中的某些文件，生成的一个可执行文件；</p><p>例如：Windows系统平台上的.EXE文件。</p><h2 id="三种不同类型的翻译程序"><a href="#三种不同类型的翻译程序" class="headerlink" title="三种不同类型的翻译程序"></a>三种不同类型的翻译程序</h2><h3 id="汇编程序："><a href="#汇编程序：" class="headerlink" title="汇编程序："></a>汇编程序：</h3><p>将汇编语言源程序翻译成目标程序；</p><h3 id="编译程序："><a href="#编译程序：" class="headerlink" title="编译程序："></a>编译程序：</h3><p>将高级语言源程序翻译成目标程序；</p><h3 id="解释程序："><a href="#解释程序：" class="headerlink" title="解释程序："></a>解释程序：</h3><p>将高级语言源程序翻译成机器指令，边翻译边执行。</p><p>C++程序的开发过程<br>算法与数据结构设计；源程序编辑；编译；连接；测试；调试。</p><h1 id="五、信息的表示与存储"><a href="#五、信息的表示与存储" class="headerlink" title="五、信息的表示与存储"></a>五、信息的表示与存储</h1><h2 id="计算机中的信息与存储单位"><a href="#计算机中的信息与存储单位" class="headerlink" title="计算机中的信息与存储单位"></a>计算机中的信息与存储单位</h2><h3 id="计算机的基本功能"><a href="#计算机的基本功能" class="headerlink" title="计算机的基本功能"></a>计算机的基本功能</h3><p>算术运算；逻辑运算。</p><h3 id="计算机中信息："><a href="#计算机中信息：" class="headerlink" title="计算机中信息："></a>计算机中信息：</h3><p>控制信息——指挥计算机操作；</p><p>数据信息——计算机程序加工的对象。</p><img src="D:\blog\picture\QQ图片20220415180845.png" style="zoom:50%;" /> <p>信息的存储单位<br>位(bit，b)：数据的最小单位，表示一位二进制信息；</p><p>字节(byte，B)：八位二进制数字组成(1byte&#x3D;8bit)；</p><p>千字节1KB&#x3D;1024B；</p><p>兆字节1MB&#x3D;1024K；</p><p>吉字节1GB&#x3D;1024M。</p><h3 id="计算机的数字系统"><a href="#计算机的数字系统" class="headerlink" title="计算机的数字系统"></a>计算机的数字系统</h3><p>二进制系统；</p><p>基本符号：0、1。</p><h3 id="程序中常用的数制："><a href="#程序中常用的数制：" class="headerlink" title="程序中常用的数制："></a>程序中常用的数制：</h3><table><thead><tr><th>进制</th><th>基数</th><th>进位原则</th><th>基本符号</th></tr></thead><tbody><tr><td>二进制</td><td>2</td><td>逢2进1</td><td>0,1</td></tr><tr><td>八进制</td><td>8</td><td>逢8进1</td><td>0,1,2,3,4,5,6,7</td></tr><tr><td>十进制</td><td>10</td><td>逢10进1</td><td>0,1,2,3,4,5,6,7,8,9</td></tr><tr><td>十六进制</td><td>16</td><td>逢16进1</td><td>0,1,2,3,4,5,6,7,8,9,A,B,D,E,F</td></tr></tbody></table><p>R 进制转换为十进制：各位数字与它的权相乘，其积相加.</p><p>十进制整数转换为R 进制整数：“除以R取余”法。</p><p>十进制小数→ R 进制小数：“乘以R取整”法。</p><p>八、十六进制的相互转换<br>1位八进制数相当于3位二进制数；</p><p>1位十六进制数相当于4位二进制数，例如：</p><p>(1011010.10)₂&#x3D;(001011010.100)₂&#x3D;(132.4)₈</p><p>(1011010.10)₂&#x3D;(01011010.1000)₂&#x3D;(5A.8)₁₆</p><p>(F7)₁₆＝(11110111)₂＝(11110111)₂</p><h1 id="数据在计算机中的编码表示"><a href="#数据在计算机中的编码表示" class="headerlink" title="数据在计算机中的编码表示"></a>数据在计算机中的编码表示</h1><h2 id="二进制数的编码表示"><a href="#二进制数的编码表示" class="headerlink" title="二进制数的编码表示"></a>二进制数的编码表示</h2><p>需要解决的问题：负数如何表示？</p><p>最容易想到的方案：</p><p>0：表示“+”号；</p><p>1：表示“-”号。</p><h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h3><p>“符号──绝对值”表示的编码</p><p>原码的缺点：</p><p>零的表示不惟一：+0和-0有两种表示方式[+0]原&#x3D;000…0，[-0]原&#x3D;100…0</p><p>进行四则运算时，符号位须单独处理，运算规则复杂。</p><h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><p>符号位可作为数值参加运算；</p><p>减法运算可转换为加法运算；</p><p>n0的表示唯一。</p><h4 id="补码的原理"><a href="#补码的原理" class="headerlink" title="补码的原理"></a>补码的原理</h4><p>模数：</p><p>位二进制整数的模数为2n；</p><p>位二进制小数的模数为2。</p><p>补数：</p><p>一个数减去另一个数（加一个负数），等于第一个数加第二个数的补数，例（时钟指针）：8+(-2)&#x3D;8+10(mod12)&#x3D;6；</p><p>一个二进制负数可用其模数与真值做加法(模减去该数的绝对值)求得其补码，例（时钟指针）：-2+12&#x3D;10。</p><h4 id="补码的计算"><a href="#补码的计算" class="headerlink" title="补码的计算"></a>补码的计算</h4><p>借助于“反码”作为中间码；</p><p>负数的反码与原码有如下关系：</p><p>符号位不变(仍用1表示)，其余各位取反(0变1，1变0)，</p><p>正数的反码与原码表示相同，正数的补码与原码相同；</p><p>反码只是求补码时的中间码；</p><p>负数的补码由该数反码的末位加1求得。</p><p>对补码再求补即得到原码。</p><h4 id="补码的优点："><a href="#补码的优点：" class="headerlink" title="补码的优点："></a>补码的优点：</h4><p>0的表示唯一；</p><p>符号位可作为数值参加运算；</p><p>补码运算的结果仍为补码。</p><p>实数的浮点表示计算机中通常采用浮点方式表示小数；</p><p>实数N用浮点形式可表示为：N&#x3D;M×2E</p><p>E：2的幂，N：阶码；</p><p>M：N的尾数。</p><p>字符在计算机中的表示<br>字符在计算机中是通过编码表示的；</p><p>例如：ASCII码是一种常用的西文字符编码：用7位二进制数表示一个字符，最多可以表示27&#x3D;128个字符；《GB18030-2005信息技术中文编码字符集》是中国国家标准。</p>]]></content>
    
    
    <summary type="html">一个简单的笔记</summary>
    
    
    
    <category term="c++学习笔记" scheme="http://1921430580.github.io/categories/c-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://1921430580.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>my-first-blog</title>
    <link href="http://1921430580.github.io/2022/04/12/my-first-blog/"/>
    <id>http://1921430580.github.io/2022/04/12/my-first-blog/</id>
    <published>2022-04-12T13:38:51.000Z</published>
    <updated>2022-04-17T06:47:04.333Z</updated>
    
    <content type="html"><![CDATA[<p>哈哈哈</p>]]></content>
    
    
    <summary type="html">毫无意义</summary>
    
    
    
    <category term="随笔" scheme="http://1921430580.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="c++学习笔记" scheme="http://1921430580.github.io/tags/c-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://1921430580.github.io/2022/04/11/hello-world/"/>
    <id>http://1921430580.github.io/2022/04/11/hello-world/</id>
    <published>2022-04-11T08:46:51.000Z</published>
    <updated>2022-04-17T06:48:43.588Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="随笔" scheme="http://1921430580.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>my blog</title>
  
  <subtitle>记录生活</subtitle>
  <link href="http://1921430580.github.io/atom.xml" rel="self"/>
  
  <link href="http://1921430580.github.io/"/>
  <updated>2022-04-18T03:06:16.876Z</updated>
  <id>http://1921430580.github.io/</id>
  
  <author>
    <name>张栋梁</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>编程学习踩坑之路</title>
    <link href="http://1921430580.github.io/2022/04/18/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E8%B8%A9%E5%9D%91%E4%B9%8B%E8%B7%AF/"/>
    <id>http://1921430580.github.io/2022/04/18/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E8%B8%A9%E5%9D%91%E4%B9%8B%E8%B7%AF/</id>
    <published>2022-04-18T01:35:41.000Z</published>
    <updated>2022-04-18T03:06:16.876Z</updated>
    
    <content type="html"><![CDATA[<p>待更新</p>]]></content>
    
    
    <summary type="html">踩过的坑</summary>
    
    
    
    <category term="踩过的坑" scheme="http://1921430580.github.io/categories/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    
    
    <category term="踩过的坑" scheme="http://1921430580.github.io/tags/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据结构学习笔记之</title>
    <link href="http://1921430580.github.io/2022/04/18/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://1921430580.github.io/2022/04/18/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-04-18T01:27:35.000Z</published>
    <updated>2022-04-18T01:28:31.590Z</updated>
    
    <content type="html"><![CDATA[<p>待更新</p>]]></content>
    
    
    <summary type="html">一个简单的算法与数据结构学习笔记</summary>
    
    
    
    <category term="算法与数据结构学习笔记" scheme="http://1921430580.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="算法与数据结构学习笔记" scheme="http://1921430580.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>c++笔记之初识c++</title>
    <link href="http://1921430580.github.io/2022/04/18/c++%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%9D%E8%AF%86c++/"/>
    <id>http://1921430580.github.io/2022/04/18/c++%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%9D%E8%AF%86c++/</id>
    <published>2022-04-18T00:29:06.000Z</published>
    <updated>2022-04-18T00:58:13.968Z</updated>
    
    <content type="html"><![CDATA[<p>C++ primer 复习 第一章<br>1.1 编写一个简单的C++程序<br>C++程序内容</p><p>每个C++程序都包含一个或多个函数，其中一个必须命名为 main</p><p>函数的定义</p><p>函数名，参数列表，函数体，返回类型</p><p>main 函数</p><p>int main(){<br>    return 0;<br>}<br>1<br>2<br>3<br>类型</p><p>定义了数据元素的内容（所占内存大小）和该数据上可进行的计算</p><p>数据保存</p><p>数据保存在变量中，每个变量都有自己的类型</p><p>若 int a &#x3D; 0，则 a 是一个int类型的变量或 a是 int型</p><p>内置类型</p><p>语言自定义的类型</p><p>1.2 输入和输出<br>（stream）流</p><p>一个流就是一个字符序列，从IO设备读出或写入。</p><p>流表示随着时间推移，字符序列是顺序生成还是消耗</p><p>IStream &amp; OStream</p><p>输入流（input stream）&amp; 输出流（output stream）</p><p>四个IO对象</p><p>IO对象名所属类型解释<br>cinIStream的类型对象标准输入<br>coutOStream的类型对象标准输出<br>cerrOStream的类型对象标准错误<br>clogOStream的类型对象一般日志打印<br>补充：cout &lt;&lt; （或 cin &gt;&gt;）重载运算符会返回它本身</p><p>#include<iostream>&#x2F;&#x2F; 使用标准库必须包含头文件</p><p>int main(){</p><pre><code>// std是标准库的命名空间std::cout &lt;&lt; &quot;Entenr two number &quot; &lt;&lt; std::endl;int num1, num2;// 等价于(std::cin &gt;&gt; num1) &gt;&gt; num2// &gt;&gt; 输入运算符，左边必须是istream对象std::cin &gt;&gt; num1 &gt;&gt; num2; std::cout &lt;&lt; &quot;The sum of &quot; &lt;&lt; num1 &lt;&lt; &quot; and &quot; &lt;&lt; num2 &lt;&lt; &quot; is &quot; &lt;&lt; (num1 + num2) &lt;&lt; std::endl;//endl (end line) 结束当前行,将设备的缓存区内容刷到设备中system(&quot;pause&quot;);return 0;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>注释</p><p>多行注释 用于解释函数或类</p><p>单行注释 用于解释单行语句</p><p>1.3 控制流循环和分支<br>控制流</p><p>语句一般顺序执行，但也能提供不同的控制流语句</p><p>while ：根据判断条件，决定循环语句是否执行</p><p>&#x2F;*<br> 求 1-10 相加之和<br>*&#x2F;<br>int main(){<br>    int sum &#x3D; 0, val &#x3D; 1;<br>    while (val&lt;&#x3D;10){<br>        sum +&#x3D; val;<br>        ++val;<br>    }</p><pre><code>std::cout &lt;&lt; &quot;sum of 1 to 10 includsive is &quot; &lt;&lt; sum &lt;&lt; std::endl;system(&quot;pause&quot;);return 0;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>for ：检测变量以判断是否继续循环，且在循环体中递增这种模式非常普遍。for是为了简化这种过程</p><p>int sum &#x3D; 0;<br>for (int val &#x3D; 1; val &lt;&#x3D; 10;++val){<br>    sum +&#x3D; val;<br>}<br>1<br>2<br>3<br>4<br>小程序</p><p>&#x2F;*<br>对用户输入的一个数组求和<br>*&#x2F;</p><p>&#x2F;&#x2F;变量必须初始化, <a href="https://blog.csdn.net/qq_38880380/article/details/79459195">https://blog.csdn.net/qq_38880380/article/details/79459195</a><br>int sum &#x3D; 0, val &#x3D; 0;<br>&#x2F;&#x2F;读取数据直至末尾(EOF&#x2F;Ctrl+Z)或读取错误<br>while (std::cin&gt;&gt;val)<br>{<br>    sum +&#x3D; val;<br>}</p><p>std::cout &lt;&lt; “The sum is “ &lt;&lt; sum &lt;&lt; std::endl;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>&#x2F;*<br>统计每个值连续出现了多少次<br>*&#x2F;</p><p>int count &#x3D; 1, head &#x3D; 0,behind &#x3D; 0;</p><pre><code>std::cin &gt;&gt; head;while (std::cin &gt;&gt; behind)&#123;    if (head == behind)&#123;        ++count;    &#125;else&#123;        std::cout &lt;&lt; &quot;The &quot; &lt;&lt; head &lt;&lt; &quot; number appear &quot; &lt;&lt;             count &lt;&lt; &quot; tiems&quot; &lt;&lt; std::endl;        count = 1;        head = behind;    &#125;&#125;std::cout &lt;&lt; &quot;The &quot; &lt;&lt; head &lt;&lt; &quot; number appear &quot;     &lt;&lt; count &lt;&lt; &quot; tiems&quot; &lt;&lt; std::endl;</code></pre><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>1.4 类简介<br>类</p><p>用来定义自己的数据结构</p><p>一个类定义了一种类型，及其相关的操作</p><p>#include<string><br>#include<iostream><br>&#x2F;*<br>以Sales_item类为例,表示一本书编号，售出册数，平均售价   √<br>支持以下操作<br>读取ISBN书号<br>通过 &gt;&gt; 或 &lt;&lt; 运算符读写书信息                      √ X<br>通过&#x3D;进行赋值<br>通过+运算符,累加两个ISBN书号对象<br>支持+&#x3D;复合运算符,将一个对象加到另一个上<br>*&#x2F;</p><p>class Sales_item{<br>public:<br>    Sales_item(std::string isbn, double price, int copies){<br>        m_isbn &#x3D; isbn;<br>        m_price &#x3D; price;<br>        m_copies &#x3D; copies;<br>    }</p><pre><code>//2、由于需要访问 Sales_item 类的私有成员，因此在 Sales_item 类定义中将它声明为友元friend std::ostream &amp; operator&lt;&lt;(std::ostream &amp; os, const Sales_item &amp; salesItem);</code></pre><p>private:<br>    std::string m_isbn;<br>    double m_price;<br>    int m_copies;<br>};</p><p>&#x2F;&#x2F;1、因为没有办法修改 ostream 类，所以只能将 &lt;&lt; 重载为全局函数的形式<br>std::ostream &amp; operator&lt;&lt;(std::ostream &amp; os, const Sales_item &amp; salesitem)<br>{<br>    os &lt;&lt; (salesitem.m_isbn + “\t” + std::to_string(salesitem.m_copies)<br>        + “\t” + std::to_string(salesitem.m_price)) &lt;&lt; std::endl;<br>    return os;<br>}</p><p>int main(){<br>    Sales_item salesItem(“0-2021-10-29”, 59.9, 10);<br>    std::cout &lt;&lt; salesItem;</p><pre><code>system(&quot;pause&quot;);return 0;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>成员函数</p><p>类中定义的函数，也被称为方法</p><p>VS 快捷注释</p><p>注释： 先CTRL+K+C</p><p>取消注释： 先CTRL+K+U</p><p>左移运算符</p><p>C++ 中左移运算符 &lt;&lt; 可以和标准输出 cout 一起用于输出，因此也常被称为输出运算符</p><p>&lt;&lt; 本没有这样的功能，因为其被 ostream 重载了，cout 是 ostream 类的对象。在头文件 <iostream>中声明，ostream 类将 &lt;&lt; 重载为成员函数，如下</p><p>ostream &amp; ostream::operator &lt;&lt; (const char* s)<br>{<br>    &#x2F;&#x2F;输出s的代码<br>    return * this;<br>}</p>]]></content>
    
    
    <summary type="html">一个简单的笔记</summary>
    
    
    
    <category term="c++学习笔记" scheme="http://1921430580.github.io/categories/c-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="c++学习笔记" scheme="http://1921430580.github.io/tags/c-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>优化日志</title>
    <link href="http://1921430580.github.io/2022/04/17/%E4%BC%98%E5%8C%96%E6%97%A5%E5%BF%97/"/>
    <id>http://1921430580.github.io/2022/04/17/%E4%BC%98%E5%8C%96%E6%97%A5%E5%BF%97/</id>
    <published>2022-04-17T09:14:51.000Z</published>
    <updated>2022-04-18T03:16:47.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022年4月11日"><a href="#2022年4月11日" class="headerlink" title="2022年4月11日"></a>2022年4月11日</h1><p>1、修改页头和页脚为透明</p><p>2、修改文章卡片和每个页面的透明度</p><p>3、优化头图由模糊变清晰的时间</p>]]></content>
    
    
    <summary type="html">记录一直以来的优化历程</summary>
    
    
    
    <category term="优化日志" scheme="http://1921430580.github.io/categories/%E4%BC%98%E5%8C%96%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="优化日志" scheme="http://1921430580.github.io/tags/%E4%BC%98%E5%8C%96%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>笔记本更换无线网卡</title>
    <link href="http://1921430580.github.io/2022/04/17/%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%9B%B4%E6%8D%A2%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1/"/>
    <id>http://1921430580.github.io/2022/04/17/%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%9B%B4%E6%8D%A2%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1/</id>
    <published>2022-04-17T07:52:51.000Z</published>
    <updated>2022-04-17T08:44:09.790Z</updated>
    
    <content type="html"><![CDATA[<p>​正好由于疫情原因封在家里不能出去，之前买了个IntelAX210无线网卡，顺便就给换了。原来的AC9462网卡实在太拉了</p><p>​AX210首先，直接上了一个新标准Wi-Fi6E，意味着更新、更强及更高性能。Wi-Fi6E较Wi-Fi6，新增了一个全新的6GHz超宽频段。有多宽呢？相当于平添110个信道，至高可支持160MHz频宽。虽然，速率上与5.8GHz相当，均为2402Mbps，但却空前纯净，几乎不存在任何干扰。在近距离传输上，6GHz频段显然更具前景。</p><p>​其次，AX210集成了更为强大的蓝牙5.2功能，而这一模块在Wi-Fi6上采用的则是蓝牙5.0标准。蓝牙5.2具有更高传输速率、更安全、更省电优势，在无线物联和无线影音表现上自然更胜一筹。</p><p>​wifi6E除了支持以往的2.4GHz与5GHz频段之外，还支持全新的6GHz频段，相较5GHz频段数量有着翻倍增加，让传输速度更快；同时将160MHz信道由2条增加至7条，同时将80MHz信道由6条增加至14条，解决连接多设备时互相干扰导致降速的问题</p><p>​WiFi 6相比WiFi 5，拥有更大带宽、更多连接终端、更低延迟等优势，主要是加入了BBS着色技术，降低信道干扰，反正比WiFi 5更好用就对了。配合WiFi 6路由器，绝对是美滋滋，体验非常好。未来的wifi6e也支持了，直接一步到位基本以后不需要换网卡了，如果网卡落后了那就是得直接换电脑了。</p><p>简单总结一下步骤：</p><p>1、洗手，2、摸金，3、拆后盖，4、断电源，5,、按几下开机键，6、拆网卡，7换网卡，8、复原，9、开机，10、安驱动</p><h1 id="1、洗手并摸一下金属物体"><a href="#1、洗手并摸一下金属物体" class="headerlink" title="1、洗手并摸一下金属物体"></a>1、洗手并摸一下金属物体</h1><p>​先洗手然后摸一下金属物体（比如门把手之类的）去除我们身上的静电。</p><p>作用是为了防止静电击穿而损坏笔记本的主板。</p><h1 id="2、拆后盖"><a href="#2、拆后盖" class="headerlink" title="2、拆后盖"></a>2、拆后盖</h1><p>用螺丝刀拆开即可，注意螺丝不要弄丢</p><h1 id="3、断电源"><a href="#3、断电源" class="headerlink" title="3、断电源"></a>3、断电源</h1><p>用手掰住电源插口的两个耳朵用力往外一拔就好</p><h1 id="4、按几下开机键"><a href="#4、按几下开机键" class="headerlink" title="4、按几下开机键"></a>4、按几下开机键</h1><p>用来去除笔记本的静电</p><h1 id="5、拆网卡"><a href="#5、拆网卡" class="headerlink" title="5、拆网卡"></a>5、拆网卡</h1><p>用螺丝刀拧开固定无线网卡的螺丝即可，拆掉的时候记得记清楚两根天线原来的安装位置，等会原样安回去。</p><h1 id="6、换网卡"><a href="#6、换网卡" class="headerlink" title="6、换网卡"></a>6、换网卡</h1><p>将购买的ax210网卡插进去然后拧上螺丝即可，记得天线安装顺序不要弄反。</p><h1 id="7、复原"><a href="#7、复原" class="headerlink" title="7、复原"></a>7、复原</h1><p>按拆机步骤反向来一遍即可</p><h1 id="8、检查"><a href="#8、检查" class="headerlink" title="8、检查"></a>8、检查</h1><p>打开设备管理器看看无线网卡是否成功安装，并且正确识别。</p><h1 id="9、安驱动"><a href="#9、安驱动" class="headerlink" title="9、安驱动"></a>9、安驱动</h1><p>进入Intel官网安装ax210的最新版驱动，不安驱动速度提升不大。</p><h1 id="10、网上冲浪！"><a href="#10、网上冲浪！" class="headerlink" title="10、网上冲浪！"></a>10、网上冲浪！</h1>]]></content>
    
    
    <summary type="html">简单的更换无线网卡</summary>
    
    
    
    <category term="电脑" scheme="http://1921430580.github.io/categories/%E7%94%B5%E8%84%91/"/>
    
    
    <category term="电脑" scheme="http://1921430580.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
  </entry>
  
  <entry>
    <title>主题魔改踩坑之路</title>
    <link href="http://1921430580.github.io/2022/04/17/%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9%E8%B8%A9%E5%9D%91%E4%B9%8B%E8%B7%AF/"/>
    <id>http://1921430580.github.io/2022/04/17/%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9%E8%B8%A9%E5%9D%91%E4%B9%8B%E8%B7%AF/</id>
    <published>2022-04-17T06:58:21.000Z</published>
    <updated>2022-04-17T07:01:14.504Z</updated>
    
    <content type="html"><![CDATA[<p>测试</p>]]></content>
    
    
    <summary type="html">持续更新ing</summary>
    
    
    
    <category term="踩过的坑" scheme="http://1921430580.github.io/categories/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    
    
    <category term="踩过的坑" scheme="http://1921430580.github.io/tags/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>c++学习笔记之预备知识</title>
    <link href="http://1921430580.github.io/2022/04/15/c++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>http://1921430580.github.io/2022/04/15/c++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</id>
    <published>2022-04-15T08:46:51.000Z</published>
    <updated>2022-04-17T03:40:26.425Z</updated>
    
    <content type="html"><![CDATA[<p>​前言：本笔记通过观看b站的清华大学郑莉老师的c++课程结合学习c++语言程序设计和c++ primer plus这两本书而总结的。</p><h1 id="一、计算机系统基本概念"><a href="#一、计算机系统基本概念" class="headerlink" title="一、计算机系统基本概念"></a>一、计算机系统基本概念</h1><h2 id="1、计算机硬件"><a href="#1、计算机硬件" class="headerlink" title="1、计算机硬件"></a>1、计算机硬件</h2><p>计算机硬件部分是由cpu、内存储器、外存储器、输入设备和输出设备五大部分组成的</p><h2 id="2、计算程序语言"><a href="#2、计算程序语言" class="headerlink" title="2、计算程序语言"></a>2、计算程序语言</h2><p>计算机解决问题是程序控制的；</p><p>程序就是操作步骤；</p><p>程序要使用语言来表达</p><h2 id="3、机器语言"><a href="#3、机器语言" class="headerlink" title="3、机器语言"></a>3、机器语言</h2><p>计算机能识别的是机器语言；</p><p>机器语言指令是由0和1编码的；</p><p>例如：加法指令可能是“0001”。</p><h2 id="4、计算软件"><a href="#4、计算软件" class="headerlink" title="4、计算软件"></a>4、计算软件</h2><p>是一系列按照特定顺序组织的计算机数据和指令的集合。一般来讲软件被划分为系统软件、应用软件和介于这两者之间的中间件；</p><p>软件包括程序和文档。</p><h2 id="5、计算机程序"><a href="#5、计算机程序" class="headerlink" title="5、计算机程序"></a>5、计算机程序</h2><p>指令的序列；</p><p>描述解决问题的方法和数据。</p><h1 id="二、计算机语言和程序设计方法"><a href="#二、计算机语言和程序设计方法" class="headerlink" title="二、计算机语言和程序设计方法"></a>二、计算机语言和程序设计方法</h1><h2 id="最初的计算机语言——机器语言"><a href="#最初的计算机语言——机器语言" class="headerlink" title="最初的计算机语言——机器语言"></a>最初的计算机语言——机器语言</h2><p>由二进制代码构成</p><p>计算机硬件可以识别</p><p>可以表示简单的操作</p><p>例如：加法、减法、数据移动等等</p><h2 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h2><p>将机器指令映射为助记符</p><p>如ADD、SUB、mov等；</p><p>抽象层次低，需要考虑机器细节。</p><h2 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h2><p>关键字、语句容易理解；</p><p>有含义的数据命名和算式；</p><p>抽象层次较高；</p><p>例如，算式：a+b+c&#x2F;d</p><p>屏蔽了机器的细节；</p><p>例如，这样显示计算结果：cout&lt;&lt;a+b+c&#x2F;d</p><h2 id="C-语言"><a href="#C-语言" class="headerlink" title="C++语言"></a>C++语言</h2><p>是高级语言</p><p>支持面向对象的观点和方法</p><p>将客观事物看做对象</p><p>对象间通过消息传送进行沟通</p><p>支持分类和抽象</p><h2 id="面向过程的程序设计方法："><a href="#面向过程的程序设计方法：" class="headerlink" title="面向过程的程序设计方法："></a>面向过程的程序设计方法：</h2><p>机器语言、汇编语言、高级语言都支持；</p><p>最初的目的：用于数学计算；</p><p>主要工作：设计求解问题的过程。</p><p>大型复杂的软件难以用面向过程的方式编写</p><h2 id="面向对象的程序设计方法："><a href="#面向对象的程序设计方法：" class="headerlink" title="面向对象的程序设计方法："></a>面向对象的程序设计方法：</h2><p>由面向对象的高级语言支持；</p><p>一个系统由对象构成；</p><p>对象之间通过消息进行通信。</p><h1 id="三、面向对象的基本概念"><a href="#三、面向对象的基本概念" class="headerlink" title="三、面向对象的基本概念"></a>三、面向对象的基本概念</h1><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>一般意义上的对象：现实世界中实际存在的事物。</p><p>面向对象方法中的对象：程序中用来描述客观事物的实体。</p><h2 id="抽象与分类"><a href="#抽象与分类" class="headerlink" title="抽象与分类"></a>抽象与分类</h2><p>分类依据的原则——抽象；</p><p>l抽象出同一类对象的共同属性和行为形成类；</p><p>l类与对象是类型与实例的关系。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>隐蔽对象的内部细节；</p><p>对外形成一个边界；</p><p>只保留有限的对外接口；</p><p>使用方便、安全性好。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>意义在于软件复用；</p><p>改造、扩展已有类形成新的类。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>同样的消息作用在不同对象上，可以引起不同的行为。</p><h1 id="四、程序的开发过程"><a href="#四、程序的开发过程" class="headerlink" title="四、程序的开发过程"></a>四、程序的开发过程</h1><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><h3 id="源程序："><a href="#源程序：" class="headerlink" title="源程序："></a>源程序：</h3><p>用源语言写的，有待翻译的程序；</p><h3 id="目标程序："><a href="#目标程序：" class="headerlink" title="目标程序："></a>目标程序：</h3><p>源程序通过翻译程序加工以后生成的机器语言程序；</p><h3 id="可执行程序："><a href="#可执行程序：" class="headerlink" title="可执行程序："></a>可执行程序：</h3><p>连接目标程序以及库中的某些文件，生成的一个可执行文件；</p><p>例如：Windows系统平台上的.EXE文件。</p><h2 id="三种不同类型的翻译程序"><a href="#三种不同类型的翻译程序" class="headerlink" title="三种不同类型的翻译程序"></a>三种不同类型的翻译程序</h2><h3 id="汇编程序："><a href="#汇编程序：" class="headerlink" title="汇编程序："></a>汇编程序：</h3><p>将汇编语言源程序翻译成目标程序；</p><h3 id="编译程序："><a href="#编译程序：" class="headerlink" title="编译程序："></a>编译程序：</h3><p>将高级语言源程序翻译成目标程序；</p><h3 id="解释程序："><a href="#解释程序：" class="headerlink" title="解释程序："></a>解释程序：</h3><p>将高级语言源程序翻译成机器指令，边翻译边执行。</p><p>C++程序的开发过程<br>算法与数据结构设计；源程序编辑；编译；连接；测试；调试。</p><h1 id="五、信息的表示与存储"><a href="#五、信息的表示与存储" class="headerlink" title="五、信息的表示与存储"></a>五、信息的表示与存储</h1><h2 id="计算机中的信息与存储单位"><a href="#计算机中的信息与存储单位" class="headerlink" title="计算机中的信息与存储单位"></a>计算机中的信息与存储单位</h2><h3 id="计算机的基本功能"><a href="#计算机的基本功能" class="headerlink" title="计算机的基本功能"></a>计算机的基本功能</h3><p>算术运算；逻辑运算。</p><h3 id="计算机中信息："><a href="#计算机中信息：" class="headerlink" title="计算机中信息："></a>计算机中信息：</h3><p>控制信息——指挥计算机操作；</p><p>数据信息——计算机程序加工的对象。</p><img src="D:\blog\picture\QQ图片20220415180845.png" style="zoom:50%;" /> <p>信息的存储单位<br>位(bit，b)：数据的最小单位，表示一位二进制信息；</p><p>字节(byte，B)：八位二进制数字组成(1byte&#x3D;8bit)；</p><p>千字节1KB&#x3D;1024B；</p><p>兆字节1MB&#x3D;1024K；</p><p>吉字节1GB&#x3D;1024M。</p><h3 id="计算机的数字系统"><a href="#计算机的数字系统" class="headerlink" title="计算机的数字系统"></a>计算机的数字系统</h3><p>二进制系统；</p><p>基本符号：0、1。</p><h3 id="程序中常用的数制："><a href="#程序中常用的数制：" class="headerlink" title="程序中常用的数制："></a>程序中常用的数制：</h3><table><thead><tr><th>进制</th><th>基数</th><th>进位原则</th><th>基本符号</th></tr></thead><tbody><tr><td>二进制</td><td>2</td><td>逢2进1</td><td>0,1</td></tr><tr><td>八进制</td><td>8</td><td>逢8进1</td><td>0,1,2,3,4,5,6,7</td></tr><tr><td>十进制</td><td>10</td><td>逢10进1</td><td>0,1,2,3,4,5,6,7,8,9</td></tr><tr><td>十六进制</td><td>16</td><td>逢16进1</td><td>0,1,2,3,4,5,6,7,8,9,A,B,D,E,F</td></tr></tbody></table><p>R 进制转换为十进制：各位数字与它的权相乘，其积相加.</p><p>十进制整数转换为R 进制整数：“除以R取余”法。</p><p>十进制小数→ R 进制小数：“乘以R取整”法。</p><p>八、十六进制的相互转换<br>1位八进制数相当于3位二进制数；</p><p>1位十六进制数相当于4位二进制数，例如：</p><p>(1011010.10)₂&#x3D;(001011010.100)₂&#x3D;(132.4)₈</p><p>(1011010.10)₂&#x3D;(01011010.1000)₂&#x3D;(5A.8)₁₆</p><p>(F7)₁₆＝(11110111)₂＝(11110111)₂</p><h1 id="数据在计算机中的编码表示"><a href="#数据在计算机中的编码表示" class="headerlink" title="数据在计算机中的编码表示"></a>数据在计算机中的编码表示</h1><h2 id="二进制数的编码表示"><a href="#二进制数的编码表示" class="headerlink" title="二进制数的编码表示"></a>二进制数的编码表示</h2><p>需要解决的问题：负数如何表示？</p><p>最容易想到的方案：</p><p>0：表示“+”号；</p><p>1：表示“-”号。</p><h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h3><p>“符号──绝对值”表示的编码</p><p>原码的缺点：</p><p>零的表示不惟一：+0和-0有两种表示方式[+0]原&#x3D;000…0，[-0]原&#x3D;100…0</p><p>进行四则运算时，符号位须单独处理，运算规则复杂。</p><h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><p>符号位可作为数值参加运算；</p><p>减法运算可转换为加法运算；</p><p>n0的表示唯一。</p><h4 id="补码的原理"><a href="#补码的原理" class="headerlink" title="补码的原理"></a>补码的原理</h4><p>模数：</p><p>位二进制整数的模数为2n；</p><p>位二进制小数的模数为2。</p><p>补数：</p><p>一个数减去另一个数（加一个负数），等于第一个数加第二个数的补数，例（时钟指针）：8+(-2)&#x3D;8+10(mod12)&#x3D;6；</p><p>一个二进制负数可用其模数与真值做加法(模减去该数的绝对值)求得其补码，例（时钟指针）：-2+12&#x3D;10。</p><h4 id="补码的计算"><a href="#补码的计算" class="headerlink" title="补码的计算"></a>补码的计算</h4><p>借助于“反码”作为中间码；</p><p>负数的反码与原码有如下关系：</p><p>符号位不变(仍用1表示)，其余各位取反(0变1，1变0)，</p><p>正数的反码与原码表示相同，正数的补码与原码相同；</p><p>反码只是求补码时的中间码；</p><p>负数的补码由该数反码的末位加1求得。</p><p>对补码再求补即得到原码。</p><h4 id="补码的优点："><a href="#补码的优点：" class="headerlink" title="补码的优点："></a>补码的优点：</h4><p>0的表示唯一；</p><p>符号位可作为数值参加运算；</p><p>补码运算的结果仍为补码。</p><p>实数的浮点表示计算机中通常采用浮点方式表示小数；</p><p>实数N用浮点形式可表示为：N&#x3D;M×2E</p><p>E：2的幂，N：阶码；</p><p>M：N的尾数。</p><p>字符在计算机中的表示<br>字符在计算机中是通过编码表示的；</p><p>例如：ASCII码是一种常用的西文字符编码：用7位二进制数表示一个字符，最多可以表示27&#x3D;128个字符；《GB18030-2005信息技术中文编码字符集》是中国国家标准。</p>]]></content>
    
    
    <summary type="html">一个简单的笔记</summary>
    
    
    
    <category term="c++学习笔记" scheme="http://1921430580.github.io/categories/c-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="c++学习笔记" scheme="http://1921430580.github.io/tags/c-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>my-first-blog</title>
    <link href="http://1921430580.github.io/2022/04/12/my-first-blog/"/>
    <id>http://1921430580.github.io/2022/04/12/my-first-blog/</id>
    <published>2022-04-12T13:38:51.000Z</published>
    <updated>2022-04-17T06:47:04.333Z</updated>
    
    <content type="html"><![CDATA[<p>哈哈哈</p>]]></content>
    
    
    <summary type="html">毫无意义</summary>
    
    
    
    <category term="随笔" scheme="http://1921430580.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="c++学习笔记" scheme="http://1921430580.github.io/tags/c-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://1921430580.github.io/2022/04/11/hello-world/"/>
    <id>http://1921430580.github.io/2022/04/11/hello-world/</id>
    <published>2022-04-11T08:46:51.000Z</published>
    <updated>2022-04-17T06:48:43.588Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="随笔" scheme="http://1921430580.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
